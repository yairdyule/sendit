datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password       Password?
  notes          Note[]
  sentQueues     Queue[]   @relation("SentQueues")
  receivedQueues Queue[]   @relation("ReceivedQueues")
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model Queue {
  id           String  @id @default(cuid())
  title        String
  description  String
  exported_yet Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User   @relation(name: "SentQueues", fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId String

  recipient   User?   @relation(name: "ReceivedQueues", fields: [recipientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  recipientId String?

  songs Song[] @relation("QueueHasSongs")
}

model Song {
  id          String @id
  name        String
  artist      String
  spotify_uri String

  queue   Queue  @relation(name: "QueueHasSongs", fields: [queueId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  queueId String
}
